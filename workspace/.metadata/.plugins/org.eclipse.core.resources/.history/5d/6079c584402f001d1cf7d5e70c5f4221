/*
 * gameloop.c
 *
 *  Created on: Sep 7, 2022
 *      Author: arthur
 */

#include <inttypes.h>
#include <msp430f5529.h>
#include "global.h"
#include "peripherals.h"
#include "grlib.h"
#include "graphics.h"
#include "heap.h"
#include "game.h"

#define CLEAR_TMRB (TBCTL |= TBCLR);
#define FRQ_TO_TMR(x) (0x7fff / x)

struct GameInfo {
	ListHandle_t* activeObjects;
	char key;
} gameInfo;

void addGameObject(GameObject_t* go) {
	go->lh.next = gameInfo.activeObjects;
	go->lh.next->prev = &go->lh;
	go->lh.prev = NULL;
	gameInfo.activeObjects = &go->lh;
}

void removeGameObject(GameObject_t* go) {
	if(go->lh.prev != 0) {
		go->lh.prev->next = go->lh.next;
	} else {
		gameInfo.activeObjects = go->lh.next;
	}

	if(go->lh.next != 0) {
		go->lh.next->prev = go->lh.prev;
	}
}

void getInputs() {
	// poll keys
	char key = getKey();
	if(key) {
		gameInfo.key = key;
	}
};

void doUpdate() {
	ListHandle_t* iter = gameInfo.activeObjects;

	/* Remove alien if button pressed */
	if(gameInfo.key >= '0' && gameInfo.key <= '9') {
		while(iter != NULL) {
			if(iter->number == (gameInfo.key - '0')) {
				remAlien(iter);
			}
			iter = iter->next;
		}
	}

	iter = gameInfo.activeAliens;

	/* Update positions */
	while(iter != NULL) {
		iter->x = iter->x + (iter->speed / UPDATE_FREQ);
		iter = iter->next;
	}
};

void draw() {
	Graphics_clearDisplay(&g_sContext);

	Alien* iter = gameInfo.activeAliens;
	while(iter != NULL) {
		Graphics_drawImage(&g_sContext, iter->sprite, (iter->x / UNITS_PER_PIX), (iter->y / UNITS_PER_PIX));
		iter = iter->next;
	}

	Graphics_flushBuffer(&g_sContext);
};

void gameLoop() {
	volatile int tmr = TBR;
	if(tmr > FRQ_TO_TMR(UPDATE_FREQ)) { /* Run Draw / Update loop at ~ 15Hz */
		CLEAR_TMRB;
		doUpdate();
		draw();
	} else {
		getInputs();
	}
};

void cfg_timer() {
	/* 16 bits, Clock source ACLK, Continuous Mode */
	TBCTL  = CNTL_0 | TBSSEL_1 | MC_2;
	CLEAR_TMRB;
}

void initGameState() {
	cfg_timer();
	initLeds();

	Alien* alien = allocate(sizeof(Alien));
	alien->sprite = &Alien_Sprite;
	alien->x = 0;
	alien->y = 0;
	alien->number = 0;
	alien->speed = 9600 / 10;

	Alien* alien2 = allocate(sizeof(Alien));
	alien2->sprite = &Alien_Sprite;
	alien2->x = 16;
	alien2->y = 0;
	alien2->number = 0;
	alien2->speed = 9600 / 10;

	pushAlien(alien);
	pushAlien(alien2);
}
